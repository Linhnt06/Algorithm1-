from math import sqrt
class Point(object):
    def __init__(self, x, y):
        self.x=int(x)
        self.y=int(y)
    def distance(self, other):
        return sqrt(( self.x - other.x)**2 +( self.y - other.y)**2)
    def __add__(self,p):
        localx = self.x + p.x
        localy = self.y + p.y
        return Point(localx, localy)
    def __truediv__(self, p):
        self.x = self.x / p
        self.y = self.y / p
        return self
    def __repr__(self):
        return("Point({0}, {1})".format(self.x, self.y))
class Cluster(object):
    def __init__(self, x, y):
        self.center = Point(x, y)
        self.points = []
    
    def update(self):
        temp=Point(0, 0)
        count=0
        for point in self.points:
            count+=1
            temp += point
        print(len(self.points))
        self.center =  temp/count
        self.points = []
    def add_point(self, point):
        self.points.append(point)
def compute_result(points):
    points = [Point(*point) for point in points]
    a = Cluster(1,0)
    b = Cluster(-1,0)
    a_old = []
    for _ in range(10000): # max iterations
        for point in points:
            if point.distance(a.center) < point.distance(b.center):
                # add the right point
                a.add_point(point)
            else:
                # add the right point
                b.add_point(point)
        if a_old == a.points:
            break
        a_old = a.points
        a.update()
        b.update()
    print(a.center.y)
    return [(a.center.x, a.center.y), (b.center.x, b.center.y)]
